?start: class

class: "class" NAME "{" class_stmt* "}"
class_stmt: class_decl
    | function_def
class_decl: decl_type _type var_list TERMINATOR
decl_type: "field" | "static"
var_list: NAME ("," NAME)*
function_def: function_kind function_type NAME "(" function_decl? ")" block
function_kind: "function" | "constructor" | "method"
function_type: "void" | "int" | NAME
function_decl: _type NAME ("," _type NAME)*

block: "{" stmt* "}"
stmt: var_decl
    | assignment
    | return
    | call_function
    | while
    | if
var_decl: "var" _type var_list TERMINATOR
assignment: "let" (NAME | array) "=" expr TERMINATOR
call_function: "do" function TERMINATOR
while: "while" "(" comp ")" block
if: "if" "(" comp ")" block ("else" block )?
return: "return" expr? TERMINATOR

comp: "~"? "(" comp ")" (logic_op comp)* | expr (comp_op expr)? 
logic_op: "&" | "|"
comp_op: "<" | ">" | "="
expr: "~"? term (bin_op term)*
term: NAME | string | "-"? number | boolean | function | array | "(" expr ")"
bin_op: "+" | "-" | "*" | "/"
function: NAME ("." NAME)? "(" [func_expr] ")"
func_expr: expr ("," expr)*

_type: "int" | "char" | "boolean" | NAME
boolean: "false" | "true" | "null"
array: NAME "[" expr "]"
string : ESCAPED_STRING
number: "0" .. "9" ( "0" .. "9")*

TERMINATOR: ";"
COMMENT: "//" /[^\n]*/ NEWLINE
NEWLINE: "\n"
MULTILINE_COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//

%import common.CNAME -> NAME
%import common.WS
%import common.ESCAPED_STRING

%ignore WS
%ignore COMMENT
%ignore MULTILINE_COMMENT
%ignore NEWLINE