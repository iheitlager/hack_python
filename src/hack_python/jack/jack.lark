?start: class

class: "class" NAME "{" class_stmt* "}"

class_stmt: class_decl
    | function_def
class_decl: decl_type _type var_list TERMINATOR
decl_type: "field" | "static"
var_list: NAME ("," NAME)*
function_def: function_kind function_type NAME "(" function_decl? ")" block
function_kind: "function" | "constructor" | "method"
function_type: "void" | "int" | NAME
function_decl: _type NAME ("," _type NAME)*

stmt: var_decl
    | assignment
    | return
    | call_function
    | while
    | if
var_decl: "var" _type var_list TERMINATOR
assignment: "let" (NAME | array) "=" expr TERMINATOR
call_function: "do" function TERMINATOR
while: "while" "(" comp ")" block
if: "if" "(" comp ")" block 
return: "return" term? TERMINATOR

block: "{" stmt* "}"
_type: "int" | NAME
comp: expr comp_op expr
comp_op: "<" | ">"
expr: term (bin_op term)*
term: NAME | string | "-"? number | function | array | "(" expr ")"
bin_op: "+" | "-" | "*" | "//"
function: NAME "." NAME "(" expr? ")"
array: NAME "[" expr "]"
string : ESCAPED_STRING
number: "0" .. "9" ( "0" .. "9")*

TERMINATOR: ";"
COMMENT: "//" /[^\n]*/ NEWLINE
NEWLINE: "\n"
MULTILINE_COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//

%import common.CNAME -> NAME
%import common.WS
%import common.ESCAPED_STRING

%ignore WS
%ignore COMMENT
%ignore MULTILINE_COMMENT
%ignore NEWLINE