?start: class

class: "class" NAME "{" class_stmt+ "}" -> class
?class_stmt: class_decl
    | function_def
class_decl: field_type var_type var_list _TERMINATOR -> class_decl
!field_type: "field" | "static" -> field_type
function_def: function_kind function_type NAME "(" function_decl? ")" block -> function_def
!function_kind: "function" | "constructor" | "method" 
?function_type: "void" | "int" | NAME
?function_decl: var_type NAME ("," var_type NAME)*

?block: "{" stmt* "}"
?stmt: var_decl
    | assignment
    | return
    | call_function
    | while
    | if
var_decl: "var" var_type var_list  _TERMINATOR
var_list: NAME ("," NAME)*
assignment: "let" (NAME | array) "=" expr _TERMINATOR
call_function: "do" function _TERMINATOR
while: "while" "(" comp ")" block
if: "if" "(" comp ")" block ("else" block )?
return: "return" expr? _TERMINATOR

comp: "~"? "(" comp ")" (logic_op comp)* | expr (comp_op expr)? 
logic_op: "&" | "|"
comp_op: "<" | ">" | "="
expr: "~"? term (bin_op term)*
term: NAME | string | "-"? number | boolean | function | array | "(" expr ")"
bin_op: "+" | "-" | "*" | "/"
function: NAME ("." NAME)? "(" [func_expr] ")"
func_expr: expr ("," expr)*

!var_type: "int" | "char" | "boolean" | NAME -> var_type
boolean: "false" | "true" | "null"
array: NAME "[" expr "]"
string : ESCAPED_STRING
number: "0" .. "9" ( "0" .. "9")*
name: NAME

_TERMINATOR: ";"
COMMENT: "//" /[^\n]*/ NEWLINE
NEWLINE: "\n"
MULTILINE_COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//

%import common.CNAME -> NAME
%import common.WS
%import common.SIGNED_INT -> NUMBER
%import common.ESCAPED_STRING

%ignore WS
%ignore COMMENT
%ignore MULTILINE_COMMENT
%ignore NEWLINE